{"version":3,"sources":["components/table/table.js","firebase.service.js","App.js","serviceWorker.js","index.js"],"names":["table","props","selectedOption","data","mentors","length","tasks","tasksRow","map","task","react_default","a","createElement","key","_","uniqueId","href","taskLink","target","rel","taskName","students","find","mentor","mentorGithub","value","student","studentTasks","checked","checkedTasks","some","item","status","taskStatus","className","studentLink","studentGithub","fire","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","provider","auth","GithubAuthProvider","addScope","fb","login","signInWithPopup","logout","signOut","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","then","_ref","user","setState","handleChange","localStorage","setItem","JSON","stringify","state","parse","getItem","onAuthStateChanged","displayName","photoURL","_this2","fetch","response","json","_this$state","console","log","options","label","concat","mentorName","authMentor","toLowerCase","lib","onClick","react_select_esm","onChange","components_table_table","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f5ec04a3.chunk.js","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport './table.css';\n\nconst table = (props) => {\n  const { selectedOption } = props;\n  const { data } = props;\n  if(selectedOption && data.mentors.length >= 1) {\n    const { tasks, mentors } = data;\n\n    const tasksRow = tasks.map(task => \n      (\n        <th key={_.uniqueId('task_')}> \n          <a key={_.uniqueId('a_')} href={task.taskLink} target='_blank' rel='noopener noreferrer'>{task.taskName}</a>\n        </th>\n      ));\n\n    const selectedMentor = mentors.find(mentor => mentor.mentorGithub === selectedOption.value);\n    const students = selectedMentor.students.map(student => {\n      const studentTasks = tasks.map(task => {\n\t\t\t\tconst checked = student.checkedTasks.some(item => item === task.taskName);\n\t\t\t\tlet status = task.taskStatus;\n\n\t\t\t\tif (checked) {\n\t\t\t\t\t\tstatus = 'Done';\n\t\t\t\t}\n\t\t\t\treturn <td key={_.uniqueId('td_')} className={status}></td>;\n\t\t\t});\n\t\t\tconst studentLink = 'https://github.com/' + student.studentGithub;\n\t\t\treturn (\n\t\t\t\t\t<tr key={_.uniqueId('tr_')}>\n\t\t\t\t\t\t\t<td key={_.uniqueId('td_')}>\n\t\t\t\t\t\t\t\t<a href={studentLink} target='_blank' rel='noopener noreferrer' key={_.uniqueId('a_')}>{student.studentGithub}</a>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t{studentTasks}\n\t\t\t\t\t</tr>\n\t\t\t);\n\t\t});\n\n    return (\n        <table key={_.uniqueId('table_')} className='dashboard-table'>\n            <thead key={_.uniqueId('thead_')}>\n                <tr key={_.uniqueId('tr_')}>\n                    <th key={_.uniqueId('th_')}></th>\n                    {tasksRow}\n                </tr>\n            </thead>\n            <tbody key={_.uniqueId('tbody_')}>\n                {students}\n            </tbody>\n        </table>\n    );\n  }\n  else return (\n    null\n  );\n};\n\nexport default table\n","import firebase from 'firebase';\n\nconst config = {\n  apiKey: \"AIzaSyBLIx7hw3p1ttbKuILQxoUJhh6CEtF_AyA\",\n  authDomain: \"rss-dashboard-client.firebaseapp.com\",\n  databaseURL: \"https://rss-dashboard-client.firebaseio.com\",\n  projectId: \"rss-dashboard-client\",\n  storageBucket: \"rss-dashboard-client.appspot.com\",\n  messagingSenderId: \"734063673265\"\n};\n\nconst fire = firebase.initializeApp(config);\nconst provider = new firebase.auth.GithubAuthProvider();\nprovider.addScope('repo');\n\nconst auth = fire.auth();\n\nexport const fb = {\n  login: () => auth.signInWithPopup(provider),\n  logout: () => auth.signOut(),\n  auth\n};\n","import React, { Component } from 'react';\nimport Select from 'react-select';\nimport Table from './components/table/table';\nimport { fb } from './firebase.service';\nimport { GithubLoginButton } from \"react-social-login-buttons\";\nimport _ from 'lodash';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      data: {\n        \"tasks\": [],\n        \"mentors\": [],\n      },\n      selectedOption: JSON.parse(localStorage.getItem('mentor')),\n      user: null\n    };\n\n    fb.auth.onAuthStateChanged(user =>\n      this.setState({ user: user\n        ? { displayName: user.displayName, photoURL: user.photoURL }\n        : null\n      }));\n  }\n\n  login = () => {\n    fb.login().then(({ user }) => {\n      this.setState({ user });\n    });\n  }\n\n  logout = () => {\n    fb.logout().then(() => {\n      this.setState({ user: null });\n    });\n  }\n\n  handleChange = (selectedOption) => {\n    localStorage.setItem('mentor', JSON.stringify(selectedOption));\n    this.setState({ selectedOption });\n  }\n\n  componentDidMount() {\n    const url = 'https://rss-dashboard-server.herokuapp.com/api/data';\n    fetch(url)\n    .then(response => response.json())\n    .then(data => this.setState({data: data}));\n  }\n\n  render() {\n    const { user, data } = this.state;\n    let { selectedOption } = this.state;\n    console.log(selectedOption);\n    const options = data.mentors.map(item => ({ value: item.mentorGithub, label: `${item.mentorName} (${item.mentorGithub})`}));\n  \n    if(user && !selectedOption) {\n      const authMentor = data.mentors.find(mentor => mentor.mentorName.toLowerCase() === user.displayName.toLowerCase());\n      if (authMentor) {\n        selectedOption = {\n        value: authMentor.mentorGithub,\n        label: `${authMentor.mentorName} (${authMentor.mentorGithub})`\n        }\n      }\n    }\n    return (\n      <div key={_.uniqueId('div_')} className='container'>\n        <section className=\"login__wrapper\">\n          {user\n            ? <GithubLoginButton onClick={this.logout} className='btn-login'>Logout ({user.displayName})</GithubLoginButton>\n            : <GithubLoginButton onClick={this.login} className='btn-login'>Login</GithubLoginButton>\n          }\n        </section>\n        <Select\n            key={_.uniqueId('td_')}\n            value={selectedOption}\n            onChange={this.handleChange}\n            options={options}\n          />\n        <Table\n          key={_.uniqueId('table_')}\n          data={data}\n          selectedOption={selectedOption}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}